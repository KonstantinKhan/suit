openapi: 3.0.3
info:
  version: 0.0.1
  title: Product
  description: 'Description of the transport model of the product'
  license:
    name: MIT
servers:
  - url: "http://localhost"

paths:

  /create:
    post:
      tags:
        - product
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: The request object to create a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
        required: true
      responses:
        200:
          description: Not defined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateResponse'

  /read:
    post:
      tags:
        - product
      summary: Not defined
      operationId: readProduct
      requestBody:
        description: Not defined
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReadRequest'
        required: true
      responses:
        200:
          description: Not defined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReadResponse'

  /update:
    post:
      tags:
        - product
      summary: Update a product
      operationId: updateProduct
      requestBody:
        description: The request object to update a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
        required: true
      responses:
        200:
          description: Not defined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdateResponse'

  /delete:
    post:
      tags:
        - product
      summary: Delete a product
      operationId: deleteProduct
      requestBody:
        description: The request object to delete a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDeleteRequest'
        required: true
      responses:
        200:
          description: Not defined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeleteResponse'

  /search:
    post:
      tags:
        - product
      summary: Search for products
      operationId: searchProducts
      requestBody:
        description: The request object to search for products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchRequest'
        required: true
      responses:
        200:
          description: Not defined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResponse'

components:
  schemas:

    IRequest:
      type: object
      description: Not defined
      properties:
        requestType:
          type: string
          description: Not defined
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/ProductCreateRequest'
          read: '#/components/schemas/ProductReadRequest'
          update: '#/components/schemas/ProductUpdateRequest'
          delete: '#/components/schemas/ProductDeleteRequest'
          search: '#/components/schemas/ProductSearchRequest'

    IResponse:
      type: object
      description: Not defined
      properties:
        responseType:
          type: string
          description: Not defined
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/ProductCreateResponse'
          read: '#/components/schemas/ProductReadResponse'
          update: '#/components/schemas/ProductUpdateResponse'
          delete: '#/components/schemas/ProductDeleteResponse'
          search: '#/components/schemas/ProductSearchResponse'

    ProductId:
      type: string
      description: Product ID
      example: 2c1da6c8-d99e-49ff-893d-d2be83193199

    AuthorId:
      type: string
      description: Author ID
      example: 8834f635-5243-4853-88b6-9954b93128c2

    UnitMeasure:
      type: object
      description: The structure with data about the unit
      properties:
        unitMeasureId:
          type: string
          example: 046a68e8-2085-4339-8dce-725c5609757a
        unitMeasureName:
          type: string
          description: Measure name
        unitMeasureValue:
          type: string
          description: Unit of measurement

    Measure:
      type: object
      description: The structure with data about the measure
      properties:
        measureValue:
          type: number
          description: Measure value
        unitMeasure:
          $ref: '#/components/schemas/UnitMeasure'

    EnergyValue:
      type: object
      description: The structure with data about energyValue
      properties:
        calories:
          $ref: '#/components/schemas/Measure'
        proteins:
          $ref: '#/components/schemas/Measure'
        fats:
          $ref: '#/components/schemas/Measure'
        carbohydrates:
          $ref: '#/components/schemas/Measure'

    BaseProduct:
      type: object
      description: The structure with data about the product to create request
      allOf:
        - type: object
          properties:
            measure:
              $ref: '#/components/schemas/Measure'
        - type: object
          properties:
            productName:
              type: string
              description: Product name
            energyValue:
              $ref: '#/components/schemas/EnergyValue'

    ProductResponseObject:
      description: Not defined
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
        - type: object
          description: Not defined
          properties:
            productId:
              $ref: '#/components/schemas/ProductId'
            ownerId:
              $ref: '#/components/schemas/AuthorId'

    ProductResponseSimple:
      allOf:
        - type: object
          description: Not defined
          properties:
            product:
              $ref: '#/components/schemas/ProductResponseObject'

    ProductResponseMultiple:
      allOf:
        - type: object
          description: List of found products
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/ProductResponseObject'

    FilterMeasure:
      type: object
      description: The structure with data about the filter measure
      properties:
        min:
          type: number
          description: Minimal value
        max:
          type: number
          description: Maximal value

    ProductCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'

    ProductCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductCreateObject'

    ProductCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/ProductResponseSimple'

    ProductReadObject:
      allOf:
        - type: object
          properties:
            productId:
              $ref: '#/components/schemas/ProductId'

    ProductReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductReadObject'

    ProductReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/ProductResponseSimple'

    ProductUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
        - type: object
          properties:
            productId:
              $ref: '#/components/schemas/ProductId'

    ProductUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductUpdateObject'

    ProductUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/ProductResponseSimple'

    ProductDeleteObject:
      allOf:
        - type: object
          properties:
            productId:
              $ref: '#/components/schemas/ProductId'

    ProductDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductDeleteObject'

    ProductDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/ProductResponseSimple'

    ProductSearchFilter:
      type: object
      description: The structure with data about the search filter
      properties:
        searchString:
          type: string
          description: Search string
        caloriesFilter:
          $ref: '#/components/schemas/FilterMeasure'
        proteinsFilter:
          $ref: '#/components/schemas/FilterMeasure'
        fatsFilter:
          $ref: '#/components/schemas/FilterMeasure'
        carbohydratesFilter:
          $ref: '#/components/schemas/FilterMeasure'

    ProductSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            searchFilter:
              $ref: '#/components/schemas/ProductSearchFilter'

    ProductSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/ProductResponseMultiple'